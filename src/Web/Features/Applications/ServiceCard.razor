@using Clud.Grpc
@using Humanizer;
@using System.Text

<div class="group w-full mb-12 border-b-4 @(IsUnhealthy ? "border-red-400" : "border-secondary-400") bg-white bg-opacity-10 py-4 px-6 shadow text-gray-200 rounded">
    <div class="flex max-w-full justify-between flex-wrap">
        <div class="flex items-center">
            <h3 class="text-2xl flex-1 font-semibold mr-2 mb-2 @(IsUnhealthy ? "text-red-400" : "text-secondary-400")">
                @Service.Name
            </h3>
            @if (!Service.DeploymentInProgress && IsUnhealthy)
            {
                <Badge Colour="@BadgeColour.Red">Unhealthy</Badge>
            }
            @if (Service.DeploymentInProgress)
            {
                <Badge Colour="@BadgeColour.Secondary">Deploying</Badge>
            }
        </div>
        <div class="flex justify-center items-center">
            @if (Service.IngressUrl != null)
            {
                <a class="link link-grey mr-8" href="@Service.IngressUrl" target="_blank">Link to service</a>
            }
            <button class="link link-grey">Restart</button> @* TODO make this do something *@
        </div>
    </div>
    <div class="overflow-auto">
        <table class="table-auto w-full">
            <tbody class="divide-y divide-gray-300">
            @foreach (var pod in Service.Pods)
            {
                <tr>
                    <td class="pr-12 py-5">
                        <span class="pr-2 font-semibold">
                            @pod.Name
                        </span>
                        <Badge Colour="@PodStatusBadgeColour(pod)">@pod.Status</Badge>
                    </td>
                    <td class="pr-12">
                        <div class="text-sm">
                            Running image @pod.Image
                            @if (pod.Image != Service.ImageName)
                            {
                                <span class="pl-2">
                                    <Badge Colour="@BadgeColour.Red">Outdated</Badge>
                                </span>
                            }
                        </div>
                        <div class="text-sm">
                            Created @pod.CreationDate.ToDateTimeOffset().Humanize()
                        </div>
                    </td>
                    <td class="flex flex-row h-full items-center justify-end py-5">
                        <button class="flex hover:text-secondary-100 items-center text-gray-300 uppercase tracking-widest text-sm">Pod Logs</button> @* TODO make this do something *@
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public ApplicationResponse.Types.Service Service { get; set; }

    public ApplicationResponse.Types.PodMetrics PodMetrics => Service.PodMetrics;

    public int UpToDateRunningPods => Service.Pods.Count(pod => pod.Status == "Running" && pod.Image == Service.ImageName);
    public bool IsUnhealthy => UpToDateRunningPods != PodMetrics.DesiredPods;

    public BadgeColour PodStatusBadgeColour(ApplicationResponse.Types.Pod pod) =>
        pod.Status switch {
            "Running" => BadgeColour.Secondary,
            "Pending" => BadgeColour.Primary,
            _ => BadgeColour.Red,
        };

}