@page "/apps/{applicationName}"
@using Clud.Grpc
@inject Applications.ApplicationsClient ApplicationsClient

<div class="container-md mx-auto p-4">
    @if (application != null)
    {
        <ApplicationHeader Application="@application"/>
        <div class="flex flex-col items-center">
            @if (!string.IsNullOrWhiteSpace(application.Description))
            {
                <div class="pt-4">@application.Description</div>
            }

            @if (!string.IsNullOrWhiteSpace(application.Owner) || !string.IsNullOrWhiteSpace(application.Repository))
            {
                <div class="pt-4 flex -mx-2 items-center">
                    @if (!string.IsNullOrWhiteSpace(application.Owner))
                    {
                        <span class="mx-2">Created by @application.Owner</span>
                    }
                    @if (!string.IsNullOrWhiteSpace(application.Repository))
                    {
                        <div class="flex mx-2">
                            <RepositoryLink Repository="@application.Repository" />
                        </div>
                    }
                </div>
            }

            <div class="flex flex-wrap-reverse justify-between items-center pt-8 mx-2">
                <div class="flex flex-wrap">
                    <a href="@application.IngressUrl" target="_blank" class="text-gray-200 hover:text-blue-500 font-semibold">Link to app</a>
                    <button class="text-gray-200 hover:text-blue-500 font-semibold ml-6">Config file</button> @* TODO make this do something *@
                    <button class="text-gray-200 hover:text-blue-500 font-semibold ml-6">Delete</button> @* TODO make this do something *@
                </div>
            </div>
        </div>

        <div class="mt-12">
            @foreach (var service in application.Services)
            {
                <ServiceCard service="@service" />
            }
        </div>
    }
    else
    {
        <LoadingSpinner />
    }
</div>

@code {
    [Parameter]
    public string ApplicationName { get; set; }

    private ApplicationResponse application;

    protected override async Task OnInitializedAsync()
    {
        application = await ApplicationsClient.GetApplicationAsync(new ApplicationQuery { Name = ApplicationName });
    }

}